# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbqUgO_Zy3OOspiEHSQXsPaYDRTRhgde
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import seaborn as sns


import warnings
warnings.filterwarnings('ignore')
import pickle
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
pd.set_option('display.float_format', lambda x:'%.5f' % x)

def import_dataset():
  data = pd.read_csv(r"Admission_Predict_Ver1.1.csv")
  data_visualization(data)


# Data Exploration - Understanding the data
def data_visualization(data):
  data.head()
  data.tail()
  data.shape
  data.describe()
  data.columns
# checking for the number of unique values in each column
  data.nunique()
  data['GRE Score'].unique()
  data.info()
# Cleaning data
  data.isnull().sum()
  data = data.drop(['Serial No.'], axis=1)
  # checkOutliners(data)
  training_data(data)

# this method is currently not used or called
def checkOutliners(data):
# Checking for outliners
  const_vars = [i for i in data.select_dtypes(exclude = 'object').columns if data[i].nunique() > 2]
  const_vars
  fig, ax= plt.subplots(nrows=1, ncols=len(const_vars), figsize=(12,6))
  for i in range(len(const_vars)):
    sns.boxplot(y=data[const_vars[i]], ax=ax[i], palette="Purples")
    ax[i].set_title(f'{const_vars[i].upper()}')
    ax[i].set_ylabel(' ')
    ax[i].set_xlabel(' ')
  plt.tight_layout()
  plt.show()
  data_plotting(data)

# this method is currently not used or called
def data_plotting(data):
  data.rename(columns = {'LOR ':'LOR', 'Chance of Admit ':'AdmitChances', 'GRE Score':'GRE_Score', 'TOEFL Score':'TOEFL_Score', 'University Rating':'Univ_Rating'}, inplace = True)
  data.columns
  plt.hist(data.AdmitChances)
  plt.show()
  lower_bound = 0.0
  upper_bound = 0.95
  res = data.LOR.quantile([lower_bound,upper_bound])
  res
  true_index = (res.loc[lower_bound] <= data.LOR.values) & (data.LOR.values <= res.loc[upper_bound])
  true_index
  corelation = data.corr()
  sns.heatmap(corelation, xticklabels=corelation.columns, yticklabels=corelation.columns, annot=True)
  sns.pairplot(data)
  sns.relplot(x="AdmitChances", y="GRE_Score", data=data)
  sns.relplot(x="AdmitChances", y="TOEFL_Score", data=data)
  sns.relplot(x="AdmitChances", y="CGPA", data=data)
  training_data(data)


def training_data(data):
  x = data.iloc[:, [0, 1, 2, 3, 4, 5, 6]].values
  y = data.iloc[:, [7]].values
  from sklearn.model_selection import train_test_split
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

  linear(data)
  # lassoRegression(data,x_train, x_test, y_train, y_test)
  # ridgeRegression(data,x_train, x_test, y_train, y_test)

def linear(data):
  x = data.iloc[:, [0, 1, 2, 3, 4, 5, 6]].values
  y = data.iloc[:, [7]].values
  from sklearn.model_selection import train_test_split
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  from sklearn.linear_model import LinearRegression
  scaler = StandardScaler()

  model = LinearRegression()
  pipe = make_pipeline(scaler, model)
  pipe.fit(x_train, y_train)
  pred = pipe.predict(x_test)
  from sklearn.metrics import r2_score
  print('Linear Regression')
  print(r2_score(y_test, pred))
  pickle.dump(pipe, open('LinearRegressionModel.pkl', 'wb'))


# this method is currently not used or called
def lassoRegression(data,x_train, x_test, y_train, y_test):
  x = data.iloc[:, [0, 1, 2, 3, 4, 5, 6]].values
  y = data.iloc[:, [7]].values
  from sklearn.model_selection import train_test_split
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  from sklearn.linear_model import Lasso
  lasso = Lasso()
  lasso.fit(x_train, y_train)
  lpred= lasso.predict(x_test)
  print('Lasso Regression')
  print(r2_score(y_test, lpred))


# this method is currently not used or called
def ridgeRegression(data,x_train, x_test, y_train, y_test):
  x = data.iloc[:, [0, 1, 2, 3, 4, 5, 6]].values
  y = data.iloc[:, [7]].values
  from sklearn.model_selection import train_test_split
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
  from sklearn.linear_model import Ridge
  ridge = Ridge()
  ridge.fit(x_train, y_train)
  rpred= ridge.predict(x_test)
  print('Ridge Regression')
  print(r2_score(y_test, rpred))


# run method below to retrain model (pkl files)
if __name__ == '__main__':
  import_dataset()







